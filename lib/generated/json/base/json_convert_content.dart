// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_material/models/home_cover_image_entity.dart';
import 'package:flutter_material/generated/json/home_cover_image_entity_helper.dart';
import 'package:flutter_material/models/login_model_entity.dart';
import 'package:flutter_material/generated/json/login_model_entity_helper.dart';
import 'package:flutter_material/models/home_model_entity.dart';
import 'package:flutter_material/generated/json/home_model_entity_helper.dart';
import 'package:flutter_material/models/mine/notice_model_entity.dart';
import 'package:flutter_material/generated/json/notice_model_entity_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case HomeCoverImageEntity:
			return homeCoverImageEntityFromJson(data as HomeCoverImageEntity, json) as T;			case HomeCoverImageData:
			return homeCoverImageDataFromJson(data as HomeCoverImageData, json) as T;			case LoginModelEntity:
			return loginModelEntityFromJson(data as LoginModelEntity, json) as T;			case LoginModelData:
			return loginModelDataFromJson(data as LoginModelData, json) as T;			case LoginModelDataAgent:
			return loginModelDataAgentFromJson(data as LoginModelDataAgent, json) as T;			case HomeModelEntity:
			return homeModelEntityFromJson(data as HomeModelEntity, json) as T;			case HomeModelData:
			return homeModelDataFromJson(data as HomeModelData, json) as T;			case HomeModelDataPage:
			return homeModelDataPageFromJson(data as HomeModelDataPage, json) as T;			case HomeModelDataList:
			return homeModelDataListFromJson(data as HomeModelDataList, json) as T;			case HomeModelDataListCommant:
			return homeModelDataListCommantFromJson(data as HomeModelDataListCommant, json) as T;			case NoticeModelEntity:
			return noticeModelEntityEntityFromJson(data as NoticeModelEntity, json) as T;			case NoticeModelEntityData:
			return noticeModelEntityDataFromJson(data as NoticeModelEntityData, json) as T;			case NoticeModelEntityDataPage:
			return noticeModelEntityDataPageFromJson(data as NoticeModelEntityDataPage, json) as T;			case NoticeModelEntityDataList:
			return noticeModelEntityDataListFromJson(data as NoticeModelEntityDataList, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case HomeCoverImageEntity:
			return homeCoverImageEntityToJson(data as HomeCoverImageEntity);			case HomeCoverImageData:
			return homeCoverImageDataToJson(data as HomeCoverImageData);			case LoginModelEntity:
			return loginModelEntityToJson(data as LoginModelEntity);			case LoginModelData:
			return loginModelDataToJson(data as LoginModelData);			case LoginModelDataAgent:
			return loginModelDataAgentToJson(data as LoginModelDataAgent);			case HomeModelEntity:
			return homeModelEntityToJson(data as HomeModelEntity);			case HomeModelData:
			return homeModelDataToJson(data as HomeModelData);			case HomeModelDataPage:
			return homeModelDataPageToJson(data as HomeModelDataPage);			case HomeModelDataList:
			return homeModelDataListToJson(data as HomeModelDataList);			case HomeModelDataListCommant:
			return homeModelDataListCommantToJson(data as HomeModelDataListCommant);			case NoticeModelEntity:
			return noticeModelEntityEntityToJson(data as NoticeModelEntity);			case NoticeModelEntityData:
			return noticeModelEntityDataToJson(data as NoticeModelEntityData);			case NoticeModelEntityDataPage:
			return noticeModelEntityDataPageToJson(data as NoticeModelEntityDataPage);			case NoticeModelEntityDataList:
			return noticeModelEntityDataListToJson(data as NoticeModelEntityDataList);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'HomeCoverImageEntity':
			return HomeCoverImageEntity().fromJson(json);			case 'HomeCoverImageData':
			return HomeCoverImageData().fromJson(json);			case 'LoginModelEntity':
			return LoginModelEntity().fromJson(json);			case 'LoginModelData':
			return LoginModelData().fromJson(json);			case 'LoginModelDataAgent':
			return LoginModelDataAgent().fromJson(json);			case 'HomeModelEntity':
			return HomeModelEntity().fromJson(json);			case 'HomeModelData':
			return HomeModelData().fromJson(json);			case 'HomeModelDataPage':
			return HomeModelDataPage().fromJson(json);			case 'HomeModelDataList':
			return HomeModelDataList().fromJson(json);			case 'HomeModelDataListCommant':
			return HomeModelDataListCommant().fromJson(json);			case 'NoticeModelEntityEntity':
			return NoticeModelEntity().fromJson(json);			case 'NoticeModelEntityData':
			return NoticeModelEntityData().fromJson(json);			case 'NoticeModelEntityDataPage':
			return NoticeModelEntityDataPage().fromJson(json);			case 'NoticeModelEntityDataList':
			return NoticeModelEntityDataList().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'HomeCoverImageEntity':
			return List<HomeCoverImageEntity>();			case 'HomeCoverImageData':
			return List<HomeCoverImageData>();			case 'LoginModelEntity':
			return List<LoginModelEntity>();			case 'LoginModelData':
			return List<LoginModelData>();			case 'LoginModelDataAgent':
			return List<LoginModelDataAgent>();			case 'HomeModelEntity':
			return List<HomeModelEntity>();			case 'HomeModelData':
			return List<HomeModelData>();			case 'HomeModelDataPage':
			return List<HomeModelDataPage>();			case 'HomeModelDataList':
			return List<HomeModelDataList>();			case 'HomeModelDataListCommant':
			return List<HomeModelDataListCommant>();			case 'NoticeModelEntityEntity':
			return List<NoticeModelEntity>();			case 'NoticeModelEntityData':
			return List<NoticeModelEntityData>();			case 'NoticeModelEntityDataPage':
			return List<NoticeModelEntityDataPage>();			case 'NoticeModelEntityDataList':
			return List<NoticeModelEntityDataList>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}